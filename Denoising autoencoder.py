# -*- coding: utf-8 -*-
"""SCI-content adaptive fusion network exp - 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GHXKsB235nA7o38OyEs6xu4B0UpcIAYU
"""

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

import cv2
input_list = []
pure_list = []

import numpy as np
#import tensorflow as tf
from keras.models import *
from keras.layers import  Input,Conv2D,BatchNormalization,Activation,Lambda,Subtract
#from keras import backend as K

for i in range(0,12):
    img = cv2.imread(f"A ({i+1}).JPG")
    resize_img = cv2.resize(img,(128,128))
    input_list.append(resize_img)
    pure = cv2.fastNlMeansDenoisingColored(resize_img, None, 10, 10, 7, 21)
    pure_list.append(pure)
input_list
pure_list



input_arr = np.asarray(input_list)
pure_arr = np.asarray(pure_list)

input_arr
pure_arr

from keras.optimizers import Adam
inpt = Input(shape=(1000,1000,3))
# 1st layer, Conv+relu
x = Conv2D(filters=64, kernel_size=(3,3), strides=(1,1), padding='same')(inpt)
x = Activation('relu')(x)
# 15 layers, Conv+BN+relu
for i in range(15):
    x = Conv2D(filters=64, kernel_size=(3,3), strides=(1,1), padding='same')(x)
    x = BatchNormalization(axis=-1, epsilon=1e-3)(x)
    x = Activation('relu')(x)   
# last layer, Conv
x = Conv2D(filters=1, kernel_size=(3,3), strides=(1,1), padding='same')(x)
dnCnn_autoencoder = Model(inputs=inpt, outputs=x)
dnCnn_autoencoder.compile(optimizer='adam', loss='mse')
a_e = dnCnn_autoencoder.fit(input_arr,pure_arr, epochs=100)

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

test = cv2.imread("Canon80D_GO_mean.JPG")
resize_img_test = cv2.resize(img,(128,128))
prediction = dnCnn_autoencoder.predict(input_arr)
from matplotlib import pyplot as plt
for i in range(12):
  resized = cv2.resize(prediction[i], (128,128), interpolation = cv2.INTER_AREA)
  plt.subplot(), plt.imshow(resized)
  plt.show()

